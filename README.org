#+title: README

SQLite Bindings for Coalton

* Overview

This is a WIP, suggestions and contributions are welcome.

This system is arranged into 5 packages, increasing in abstraction:

1. ~coalton-sqlite/ffi~

   CFFI calls, a slightly modified version of the package in [[https://github.com/TeMPOraL/cl-sqlite][cl-sqlite]]

2. ~coalton-sqlite/sqlite~

   Simple Coalton wrapper around the above FFI

3. ~coalton-sqlite/value~

   A ~DynamicValue~ type that covers any SQLite value, as well as a
   ~SqliteValue~ typeclass for binding/reading

4. ~coalton-sqlite/query~

   A few high-level query functions, they deal with ~(List DynamicValue)~

5. ~coalton-sqlite/record~

   A ~define-record~ macro along with functions for
   inserting/selecting record types

The query and record packages are probably going to change since I am
not super happy with them right now.

Everything above the FFI level is reexported into the ~coalton-sqlite~
package.

* Examples

Using the Query API:

#+begin_src lisp :package coalton-sqlite
  (coalton
   (with-database ":memory:"
     (fn (db)
       (execute db "create table person (name, age);"
                mempty)
       (execute db "insert into person values (?, ?)"
                (make-list (Text "garlic0x1") (Int 26)))
       (execute db "insert into person values (?, ?)"
                (make-list (Text "foo") (Int -2)))
       (query db "select * from person" mempty))))
#+end_src

#+begin_src lisp
: ((#.(TEXT "foo") #.(INT -2)) (#.(TEXT "garlic0x1") #.(INT 26)))
#+end_src

Using the Record API:

#+begin_src lisp :package coalton-sqlite
  (coalton-toplevel
    (define-record Point
      (x (Optional I64))
      (y DynamicValue)
      (z I64 "INT NOT NULL")))

  (coalton 
   (with-database ":memory:"
     (fn (db)
       (create-table db *point-schema*)
       (insert db (Point (Some 12) (Int 2) 3))
       (insert db (Point None (Text "foo") 3))
       (the (List Point) (select-all db *point-schema*)))))
#+end_src

#+begin_src
: (#.(POINT #.NONE #.(TEXT "foo") 3) #.(POINT 12 #.(INT 2) 3))
#+end_src
