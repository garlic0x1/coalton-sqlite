#+title: README

SQLite Bindings for Coalton

* Overview

This system is arranged into 5 packages, increasing in abstraction:

1. ~coalton-sqlite/ffi~

   CFFI calls, a slightly modified version of the package in [[https://github.com/TeMPOraL/cl-sqlite][cl-sqlite]]

2. ~coalton-sqlite/constants~

   Enum types from ~sqlite.h~

3. ~coalton-sqlite/sqlite~

   Simple Coalton wrapper around the above FFI

4. ~coalton-sqlite/value~

   A ~DynamicValue~ type that covers any SQLite value, as well as a
   ~SqliteValue~ typeclass for binding/reading

5. ~coalton-sqlite/query~

   A few high-level query functions, they deal with ~(List DynamicValue)~

The query and package might change, but right now it is a useful
enough high-level interface.  The primary complaint I have is
defaulting to lists of ~DynamicValue~ types.

Everything above the FFI level is reexported into the ~coalton-sqlite~
package.

* Motivation

This system intends to a be minimal and efficient binding to SQLite.

Initially I thought I would simply wrap [[https://github.com/TeMPOraL/cl-sqlite][cl-sqlite]], but that library
does runtime computation that we don't need in Coalton when it comes
to binding and reading values from statements.

* Examples

Using the Query API:

#+begin_src lisp :package coalton-sqlite
  (coalton
   (with-database ":memory:"
     (fn (db)
       (execute db "create table person (name, age);"
                mempty)
       (execute db "insert into person values (?, ?)"
                (make-list (Text "garlic0x1") (Int 26)))
       (execute db "insert into person values (?, ?)"
                (make-list (Text "foo") (Int -2)))
       (query db "select * from person" mempty))))
#+end_src

#+begin_src lisp
: ((#.(TEXT "foo") #.(INT -2)) (#.(TEXT "garlic0x1") #.(INT 26)))
#+end_src

